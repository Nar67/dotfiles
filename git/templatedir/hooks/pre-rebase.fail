#!/usr/bin/env ruby

### PROBABLY USEFUL WHEN GIT HOOK PREBASE EXISTS ###
# TODO check other hooks

class RebaseCommand
    attr_accessor branch
    attr_accessor current_branch

    def initialize
        output = `#{"ps -ocommand= -p #{Process.ppid}"}`
        match = output.match(/git (pull --rebase|rebase) \S*\s*(\S*)/)
        if not match.nil?
            @branch = match.captures[1]
        end
        @current_branch = `#{"git branch | grep '\*'"}`.split("  ")[1]
    end
end

class PreRebaseHandler
    attr_accessor rebase_command

    def initialize
        @rebase_command = RebaseCommand.new
    end

    def handle
        puts "pre rebasing"
        if self.rebase_command.current_branch != self.rebase_command.branch
            reject self.rebase_command.current_branch self.rebase_command.branch
        end
    end

    private

    def reject(current_branch, remote_branch)
        messages = ["You are currently in branch #{current_branch.upcase} and trying to update it from #{remote_branch.upcase}"]
        messages << "If you still want to rebase this branches then you need to ignore the pre_rebase git hook by executing following command."
        messages << "git pull [repo branch] --no-verify"
        feedback messages
        exit 1
    end

    def feedback messages
        puts "*" * 112
        [messages].flatten.each do |message|
            puts message
        end
        puts "*" * 112
    end
end

PreRebaseHandler.new.handle
