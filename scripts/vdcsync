#!/usr/bin/ruby

require "net/http"
require "jsonpath"
require "colorize"
require "thor"

class VdcSync < Thor
    
    desc "list <location_name>", "list the remote vdcs in the given location"
    def list(location_name)
        client = ApiClient.new()
        link = client.get_location_link(location_name)
        puts client.get_remotes(link)
    end

    desc "sync <provider_id> <location_name>", "Starts the synchronization of the given vdc in the given location"
    def sync(provider_id, location_name)
        client = ApiClient.new()
        link = client.get_location_link(location_name)
        status_link = client.sync_vdc(provider_id, link)
        status = "PENDING"
        until status =~ /FINISHED.*/
            # puts status
            status = client.get_status(status_link)
        end
    end
end

class ApiClient

    def initialize
        @conf = {}
        @conf["location"] = "http://10.60.1.245/api"
        @conf["user"] = "admin"
        @conf["password"] = "xabiquo"
    end

    def list_locations
        request = Net::HTTP::Get.new("#{@conf["location"]}/cloud/locations")
        request.add_field('accept', 'application/vnd.abiquo.publiccloudregions+json')
        body = send_request(request).body
        JsonPath.on(body, "$.collection..")
    end

    def get_location_link(name)
        list = list_locations.collect{ |x| x[0] }.select{ |x| x["name"] == name }
        list.collect{ |x| x["links"].select{ |link| link["rel"] == "self" }[0] }[0]
    end

    def get_remotes(link)
        request = Net::HTTP::Get.new(link["href"] + "/action/remotes")
        request.add_field('accept', 'application/vnd.abiquo.virtualdatacenters+json')
        body = send_request(request).body
        JsonPath.on(body, "$.collection..")[0].collect{ |x| x["providerId"] }
    end

    def sync_vdc(provider_id, link)
        request = Net::HTTP::Post.new("#{@conf["location"]}/cloud/virtualdatacenters")
        request.add_field('content-type', 'application/vnd.abiquo.syncvirtualdatacenter+json')
        request.add_field('accept', 'application/vnd.abiquo.acceptedrequest+json')
        link["rel"] = "location"
        request.body = "{\"providerId\": \"#{provider_id}\", \"links\":[#{link.to_json}]}"
        JsonPath.on(send_request(request).body, "$.links..").collect{ |x| x[0] }.select{ |link| "status" == link["rel"] }[0]
    end

    def get_status(link)
        request = Net::HTTP::Get.new(link["href"])
        request.add_field('accept', 'application/vnd.abiquo.taskextended+json')
        body = JsonPath.on(send_request(request).body, "$.")[0]
        job_states = body["jobsExtended"]["collection"].collect{ |x| "#{x["type"]}: #{parse_job_status(x["state"])}" }
        print "\r#{job_states.join("\t")}"
        body["state"]
    end

    def parse_job_status(status)
        status << " " * ("PENDING".size - status.size)
        if "DONE   " == status
            return status.colorize(:green)
        end
        if "STARTED" == status
            return status.colorize(:yellow)
        end
        if "FAILED " == status
            return status.colorize(:red)
        end
        return status
    end

    # Send the request
    # Params:
    #   +request+:: the request to send
    def send_request(request)
        uri = URI.parse(@conf["location"])
        http = Net::HTTP.new(uri.host, uri.port)
        request.basic_auth(@conf["user"], @conf["password"])
        response = http.request(request)
        # puts "#{response.code} - #{response.message}"
        if not response.code =~ /2\d\d/
            if not response.body.nil? and not response.body.empty?
                codes = JsonPath.on(response.body, "$.collection..code")
                messages = JsonPath.on(response.body, "$.collection..message")
                ex_message = ""
                codes.zip(messages).each do |code, message|
                    ex_message << "#{code} - #{message}\n"
                end
            else
                ex_message=""
            end
            raise Exception.new(ex_message.colorize(:red))
        end
        response
    end
end

VdcSync.start(ARGV)
