#!/usr/bin/ruby

### Manage public provider credentials easily into Abiquo platform enterprises
## The usege is so easy too, only requires a yaml configuration file with the provider credentials to use.
## File: $HOME/cloud_credentials.yml
## Example:
#   Api:
#       location: http://host:80/api
#       user: user
#       password: pass
#
#   AMAZON:
#       id: amazon_accesskey
#       key: amazon_key
#   digitalocean:
#       id: do_api_id
#       key: do_key

require 'jsonpath'
require 'net/http'
require 'optparse'
require 'ostruct'
require 'yaml'
require 'thor'
require 'colorize'

@@conf = YAML.load_file("#{ENV["HOME"]}/cloud_credentials.yml")
@@location = @@conf['Api']['location']
@@user = @@conf['Api']['user']
@@password = @@conf['Api']['password']

class ManageCredentials < Thor

    desc "add <provider> <enterprise>", "Adds the credentials for <provider> into the <enterprise>"
    def add(provider, enterprise)
        raise Exception.new("Provider #{provider} not found in configuration file") if @@conf[provider].nil?

        key = @@conf[provider]['key']
        access = @@conf[provider]['id']
        link = get_technology_link(provider)

        raise Exception.new("No link found for provider: #{provider}".colorize(:red)) if link.nil?
        puts "#{post_credentials(key, access, enterprise, link)}".colorize(:green)
    end

    option :remote, :type => :boolean
    desc "list_providers [remote]", "Lists the config file providers"
    def list_providers
        puts "#{get_providers(options.remote)}".colorize(:green)
    end

    desc "release <provider> <enterprise>", "Release the credentials for <provider> from the <enterprise>"
    def release(provider, enterprise)
        puts "#{delete_credentials(provider, enterprise)}".colorize(:green)
    end

    desc "list <enterprise>", "List the attached credientials of the <enterprise>"
    def list(enterprise)
        puts "#{list_credentials(enterprise)}".colorize(:green)
    end

end

# Given an enterprise name returns the enterprise id
# Parans:
#   +enterprise_name+:: The name of the enterprise where get the id
def get_enterprise_id(enterprise_name)
    request = Net::HTTP::Get.new("#{@@location}/admin/enterprises")
    request.add_field('accept', 'application/vnd.abiquo.enterprises+json')
    puts "Searching for enterprise #{enterprise_name}..."
    response = send_request(request)
    enterprise_id = JsonPath.on(response.body, "$.collection.[?(@.name=='#{enterprise_name}')].id")[0]
    raise Exception.new("Enterprise #{enterprise_name} not found".colorize(:red)) if enterprise_id.nil?
    enterprise_id
end

# Retrieves the technology (rel=hypervisor) link from the api
# Params:
#   +provider+:: the provisor (hypervisor) link to retrieve
def get_technology_link(provider)
    request = Net::HTTP::Get.new("#{@@location}/config/hypervisortypes")
    request.add_field('accept','application/vnd.abiquo.hypervisortypes+json')
    puts "Searching for provider #{provider}..."
    response = send_request(request)
    link = JsonPath.on(response.body, "$.collection.[?(@.name=='#{provider}')].links.[?(@.rel=='self')]")[0]
    link['rel'] = 'hypervisortype'
    link
end

# Sets the creadentials to the enterprise
# Params:
#   +key+:: credentials key
#   +access+:: credentials access
#   +enterprise+:: enterprise where set the credentials
#   +link+:: the provider link where the credentials belong
def post_credentials(key, access, enterprise, link)
    ent_id = get_enterprise_id(enterprise)
    request = Net::HTTP::Post.new("#{@@location}/admin/enterprises/#{ent_id}/credentials")
    request.add_field('content-type', 'application/vnd.abiquo.publiccloudcredentials+json')
    request.add_field('accept', 'application/vnd.abiquo.publiccloudcredentials+json')
    request.body = "{ \"links\": [#{link.to_json}], "
    request.body << "\"key\": \"#{key}\", \"access\": \"#{access}\"}"
    puts "Posting credentials into enterprise #{enterprise}..."
    send_request(request)
end

# Retrieves the credentials of an enterprise
# Params:
#   +enterprise+:: where retireve the credentials
def get_credentials(enterprise)
    ent_id = get_enterprise_id(enterprise)
    request = Net::HTTP::Get.new("#{@@location}/admin/enterprises/#{ent_id}/credentials")
    request.add_field('accept', 'application/vnd.abiquo.publiccloudcredentialslist+json')
    puts "Retrieving credentials for enterprise #{enterprise}..."
    send_request(request).body
end

# Remove the credentials of a provider from an enterprise
# Params:
#   +provider+:: provider of the credentials to remove
#   +ent_id+:: identifier of the enterprise which remove the credentials
def delete_credentials(provider, enterprise)
credentials = get_credentials(enterprise)
    creds = JsonPath.on(credentials, "$.collection..links[?(@.title=='#{provider}'),?(@.rel=='edit')]")
    raise Exception.new("No credentials found for enterprise #{enterprise} and provider #{provider}".colorize(:red)) if creds.empty?
    puts "Deleting the credentials of the provider #{provider} from the enterprise #{enterprise}"
    send_request(Net::HTTP::Delete.new(creds[1]['href']))
end

# Returns the provider names of the credentials attached to the given enterprise
# Params:
#   +enterprise+:: where get the credentials
def list_credentials(enterprise)
    JsonPath.on(get_credentials(enterprise), "$..collection..[?(@.rel=='hypervisortype')].title")
end


# Send the request
# Params:
#   +request+:: the request to send
def send_request(request)
    uri = URI.parse(@@location)
    http = Net::HTTP.new(uri.host, uri.port)
    request.basic_auth(@@user, @@password)
    response = http.request(request)
    puts "#{response.code} - #{response.message}"
    if not response.code =~ /2\d\d/
        if not response.body.nil? and not response.body.empty?
            codes = JsonPath.on(response.body, "$.collection..code")
            messages = JsonPath.on(response.body, "$.collection..message")
            ex_message = ""
            codes.zip(messages).each do |code, message|
                ex_message << "#{code} - #{message}\n"
            end
        else
            ex_message=""
        end
        raise Exception.new(ex_message.colorize(:red))
    end
    response
end

# Retrieves the list of all providers available to use.
# Params:
#   +remote+:: if <true> performs an api call and return all api configured providers,
#              else returns all providers from config file.
def get_providers(remote)
    if remote
        request = Net::HTTP::Get.new("#{@@location}/config/hypervisortypes")
        request.add_field('accept','application/vnd.abiquo.hypervisortypes+json')
        puts "Getting configured provider from api #{@@location}..."
        response = send_request(request)
        zip = JsonPath.on(response.body, "$.collection..name").zip(JsonPath.on(response.body, "$.collection..realName"))
        providers= []
        zip.each do |name, realName|
            providers << "#{name} (#{realName})"
        end
    else
        providers = @@conf.keys
        providers.delete('Api')
    end
    providers.sort
end

# exectute it
ManageCredentials.start(ARGV)
